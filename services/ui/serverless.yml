# Refer to this service's README to configure all required SSM parameters.
service: ui

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  iam:
    role:
      path: ${ssm:/configuration/${self:custom.stage}/iam/path, ssm:/configuration/default/iam/path, "/"}
      permissionsBoundary: ${ssm:/configuration/${self:custom.stage}/iam/permissionsBoundaryPolicy, ssm:/configuration/default/iam/permissionsBoundaryPolicy, ""}

plugins:
  - serverless-stack-termination-protection
  - serverless-iam-helper
  - serverless-s3-bucket-helper
  - serverless-vpc-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  serverlessTerminationProtection:
    stages:
      - master
      - val
      - production
  vpcConfig:
    enabled: true
    createParameters: false
    createNatGateway: 1
    cidrBlock: "10.100.0.0/16"
    zones:
      - ${self:provider.region}a
      - ${self:provider.region}b
      - ${self:provider.region}c
  hostedZoneId: ${ssm:/configuration/${self:custom.stage}/hostedZoneId, ssm:/configuration/default/hostedZoneId}
  hostedZoneDomain: ${ssm:/configuration/${self:custom.stage}/hostedZoneDomain, ssm:/configuration/default/hostedZoneDomain}
  certificateArn: ${ssm:/configuration/${self:custom.stage}/certificateArn, ssm:/configuration/default/certificateArn}
resources:
  Resources:
    Balancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Name: ${self:service}-${self:custom.stage}
        Scheme: internet-facing
        SecurityGroups:
          - !Ref BalancerSecurityGroup
        Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PublicSubnet3
        Type: application
    BalancerListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        DefaultActions:
          - Order: 1
            TargetGroupArn: !Ref BalancerTargetGroup
            Type: forward
        LoadBalancerArn: !Ref Balancer
        Port: 443
        Protocol: HTTPS
        Certificates:
          - CertificateArn: ${self:custom.certificateArn}
    BalancerTargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        IpAddressType: ipv4
        Name: ${self:service}-${self:custom.stage}
        HealthCheckProtocol: HTTP
        Port: 80
        Protocol: HTTP
        TargetType: ip
        UnhealthyThresholdCount: 3
        VpcId: !Ref VPC
    BalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for ${self:service}-${self:custom.stage} load balancer.
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            CidrIp: "0.0.0.0/0"
            FromPort: 443
            ToPort: 443
        SecurityGroupEgress:
          - IpProtocol: tcp
            CidrIp: "0.0.0.0/0"
            FromPort: 80
            ToPort: 80
    BalancerDNS:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName: !GetAtt Balancer.DNSName
          HostedZoneId: !GetAtt Balancer.CanonicalHostedZoneID
        HostedZoneId: ${self:custom.hostedZoneId}
        Name: ${self:custom.stage}.${self:custom.hostedZoneDomain}
        Type: A
  Outputs:
    ApplicationEndpointUrl:
      Value: !Sub https://${self:custom.stage}.${self:custom.hostedZoneDomain}
    VPCId:
      Value: !Ref VPC
    AppSubnet1:
      Value: !Ref AppSubnet1
    AppSubnet2:
      Value: !Ref AppSubnet2
    AppSubnet3:
      Value: !Ref AppSubnet3
    BalancerTargetGroup:
      Value: !Ref BalancerTargetGroup
    BalancerSecurityGroup:
      Value: !Ref BalancerSecurityGroup
